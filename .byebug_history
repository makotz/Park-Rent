continue
@myparkingspots
continue
@event.parkingspots.first
@event.parkingspot.first
@event.parkingspots.first
@event.parkingspots
@eventparking != nil
@eventparking != []
@eventparking != [
@eventparking.first
@eventparking
c
Parkingspot.where.not(id: nono).count
Parkingspot.where.not(id: nono)
Parkingspot.where(id: nono)
Parkingspot.find(id: nono)
Parkingspot.where(id: !nono)
Parkingspot.where(id: nono)
Parkingspot.where(id: nono))
Parkingspot.count
Parkingspot.all
nono.uniq
nono = unavailable_spots.map { |spot| spot.parkingspot.id }
nono
nono = unavailable_spots.each { |spot| spot.parkingspot.id }
unavailable_spots.first
unavailable_spots
ps.first
ps.count
ps = unavailable_spots.map { |spot| spot.parkingspot }
unavailable_spots.each { |spot| spot.parkingspot }
unavailable_spots.each { |spot| puts spot.parkingspot }
unavailable_spots.each do |spot| 
unavailable_spots.each do |spot|
unavailable_spots.as_json
unavailable_spots.count
unavailable_spots
pry
unavailable_spots
c
unavailable_spots
c
continue
c
exit
unavailable_spots
c
unavailable_spots
unavailable
continue
b = Parkingspot.find(x.parkingspot_id)
Parkingspot.find(x.parkingspot_id)
Parkking.find(x.parkingspot_id)
x.class
x
@parkingspots.first.class
@parkingspots.class
@parkingspots.type
@parkingspots
continue
@parkingspots
Parkingspot.find(x.parkingspot_id)
x.parkingspot_id
x
continue
countinue
continue
params
